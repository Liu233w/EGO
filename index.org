#+title: EGO 使用手册
#+author: 皐月中二
#+email: kuangdash@163.com

#+URI:     /
#+LANGUAGE:    zh-CN
#+OPTIONS:     H:4 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+DESCRIPTION:  EGO Manual

* 介绍
EGO 是一个由 [[https://github.com/kelvinh/org-page][org-page]] 和 [[https://github.com/tumashu/org-webpage][org-webpage]] 派生出来的项目，是一个基于 Emacs、git 服务和 org-mode 的一个静态站点生成器。（什么是静态站点生成器？google、bing 或者百度一下）

本项目依据 [[http://www.gnu.org/licenses/gpl.html][GPL]] 许可证（GNU General Public License）发布。

* 使用方法

** 安装
暂时不支持 melpa 安装，请用 =git clone= 后处理。

** 设置
下面是 emacs-china 的设置，将其写入 emacs-china 即可。你可以仿照它来设置自己的站点：

#+BEGIN_SRC emacs-lisp
  ;; the following is only needed if you install org-page manually
  (add-to-list 'load-path "path/to/EGO")

  (require 'ego)

  (add-to-list 'ego/project-config-alist
                 `("emacs-china" ; 站点工程的名字
                   :repository-directory "~/github/emacs-china.github.io" ; 站点的本地目录
                   :site-domain "http://emacs-china.github.io/" ; 站点的网址
                   :site-main-title "EMACS-CHINA" ; 站点的标题
                   :site-sub-title "=============>集思广益" ; 站点的副标题
                   :theme (default) ; 使用的主题
                   :summary (("years" :year :updates 10) ("authors" :authors) ("tags" :tags)) ; 导航栏的设置，有 category 和 summary 两种
                   :source-browse-url ("Github" "https://github.com/emacs-china") ; 你的工程源代码所在的位置
                   :personal-disqus-shortname "emacs-china" ; 使用 disqus 的话，它的短名称
                   :personal-duoshuo-shortname "emacs-china" ; 使用多说的话，它的短名称
                   :confound-email nil ; 是否保护邮件名称呢？ t 是保护，nil 是不保护，默认是保护
                   :web-server-docroot "~/webRoot/emacs-china.github.io" ; 本地测试的目录
                   :web-server-port 5432)) ; 本地测试的端口
#+END_SRC

你可以通过以下方式发现 EGO 的设置方法（英文）

#+BEGIN_EXAMPLE
C-h v ego/project-config-alist
C-h v ego/config-fallback
#+END_EXAMPLE

** 新建 Repository
通过以下方式创建新的 Repository（也就是一个新站点了）：

#+BEGIN_EXAMPLE
M-x ego/new-repository
#+END_EXAMPLE

这种方式只能进行一个初级的设置，要想让它正常工作，还是需要设置 =ego/project-config-alist= 变量。

** 新建文章
用以下方式创建新文章：

#+BEGIN_EXAMPLE
M-x ego/new-post
#+END_EXAMPLE

** 发布
用以下命令生成 html 文件，并按需传送到远程端：

#+BEGIN_EXAMPLE
M-x ego/do-publication
#+END_EXAMPLE

这条命令会问你如下几个问题：

1) Which project do you want to publish? 
   ~发布哪个站点？
2) Publish to:  [Yes] Web server to test, [No] Original repo and publish remote. 
   ~测试发布（y）还是真正发布到远端（n）？
3) Publish all org files of \"%s\" project? (input 'n' if you want to publish partially) 
   ~发布全部（y）还是改变的那些文件（n）？
4) (when (3) is n) Base git commit: HEAD~1 ? 
   ~将哪些提交视为改变文件？（当第三项是 n 时出现的选项，不懂得话回车即可）
5) checkin all changed files? (input 'n' if you have done it) 
   ~将所有改变的文件放入版本管理之下么？注意：只有放入版本管理之下的文件才能被发布。
6) (when (2) is n) publish all branch? 
   ~把所有 branch 推送到远端？（在第二项是 n 时出现的选项）

你可以在 *message* buffer 和 *EGO OUTPUT* buffer 里跟踪整个过程。

** 异步发布
你可以使用 =async.el= 包来包裹 =ego/do-publication= 命令，使得该命令异步执行。

关于 =async.el= 包的用法可以参看这里（英文） : [[https://github.com/jwiegley/emacs-async][Async]].

这里是一个例子: (你当然不能直接使用它，但是可以参考它进行自己的设置，就当是一个使用 async 的作业吧)

#+BEGIN_SRC emacs-lisp
  (require 'async)
  (defun ego/async-do-publish (&optional project-name
                                         test-and-not-publish
                                         force-all
                                         base-git-commit
                                         checkin-all
                                         publish-all)
    (interactive
     (let* ((j (or ego/default-project-name
                   (completing-read "Which project do you want to publish? "
                                    (delete-dups
                                     (mapcar 'car ego/project-config-alist))
                                    nil t nil nil ego/last-project-name)))
            (p (y-or-n-p "Action:  [Yes] Test, [No] Tested Publish. "))
            (f (y-or-n-p (format "Publish all org files of \"%s\" project? " j)))
            (b (unless f (read-string "Base git commit: " "HEAD~1")))
            (c (y-or-n-p "checkin all changed files? (input 'n' if you have done it)"))
            (a (unless p (y-or-n-p "publish all branch? "))))
       (list j p f b c a)))
    (async-start
     `(lambda ()
        ;; load packages and set load-path 这里开始调用新进程，在新进程的发布开始之前，需要配置新进程使得 ego/do-publication 命令正常工作
        (setq package-user-dir ,(expand-file-name "~/.emacs.d/elpa/"))
        (package-initialize)
        (add-to-list 'load-path ,(expand-file-name "~/github/org-mode/lisp"))
        (add-to-list 'load-path ,(expand-file-name "~/github/org-mode/contrib/lisp" t))
        (add-to-list 'load-path ,ego/load-directory)

        ;; set coding-system
        (set-terminal-coding-system 'utf-8-unix)
        (set-keyboard-coding-system 'utf-8-unix)
        (prefer-coding-system 'utf-8-unix)
        (setq save-buffer-coding-system 'utf-8-unix
              coding-system-for-write 'utf-8-unix)

        ;; pre-set ego configurations
        (require 'cl-lib)
        (require 'ego)
        (setq ego/project-config-alist ',ego/project-config-alist)

        ;; Make EGO show svg images
        (require 'ox-html)
        (defun kd/org-html--format-image (source attributes info)
          "Return \"img\" tag with given SOURCE and ATTRIBUTES.
    SOURCE is a string specifying the location of the image.
    ATTRIBUTES is a plist, as returned by
    `org-export-read-attribute'.  INFO is a plist used as
    a communication channel."
          (org-html-close-tag
           "img"
           (org-html--make-attribute-string
            (org-combine-plists
             (list :src source
                   :alt (if (string-match-p "^ltxpng/" source)
                            (org-html-encode-plain-text
                             (org-find-text-property-in-string 'org-latex-src source))
                          (file-name-nondirectory source)))
             attributes))
           info))
        (advice-add 'org-html--format-image :override #'kd/org-html--format-image)

        ;; without org-to-html if possible
        (unless ,test-and-not-publish
          (if ,base-git-commit
              (setq ego/publish-without-org-to-html 1)
            (setq ego/publish-without-org-to-html 2)))
    
        ;; ego/do-publication here 注意：这里开始是新进程的发布命令
        (ego/do-publication ,project-name
                            ,test-and-not-publish
                            ,force-all
                            ,base-git-commit
                            ,checkin-all
                            ,publish-all)

        ;; waiting for push remote success or just wait http-server in which case you have to close *emacs* buffer manually
        (while (not ego/async-publish-success)
          (sit-for 1))

        ;; return the result 返回结果
        (with-current-buffer (get-buffer-create ,ego/temp-buffer-name)
          (buffer-string))
        )
     `(lambda (result)
        (with-current-buffer (get-buffer-create ego/temp-buffer-name)
          (insert (format "*EGO output* should be :\n %s \nego/async-do-publish done!" result))))))
#+END_SRC

你可以在 *emacs* buffer 和 *EGO OUTPUT* buffer 里跟踪整个过程。

* 一些缺点
假若要删除发布后的 html 文件，只能用 git 跳转到 html 所在分支，进行手动删除后，将该分支提交到服务器端。

也即是说，删除发布后的 html 文件比较麻烦。（使用传统的 git 操作模式）

* 待完成事项
目前只有一个 default 主题，希望能有一个好的主题收集办法。

* Tips in English[fn:1]
** How to install EGO in manual way

To install EGO manually you should first install all
dependencies listed in *README.org*. Once this has been completed,
clone the repo:

#+BEGIN_EXAMPLE
git clone https://github.com/emacs-china/EGO.git
#+END_EXAMPLE

After that, please remember to add this location to your emacs'
=load-path= variable so that emacs can find the package.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/path/to/EGO")
(require 'EGO)
#+END_SRC

NOTE: This is NOT recommended way for emacs beginner.

** COMMENT How to install org-webpage Through package management system

# this headline is left for EGO to improve

1. Setting melpa repository, see: http://melpa.org/#/getting-started
2. Run the following command
   #+BEGIN_EXAMPLE
   M-x package-install RET ego RET
   #+END_EXAMPLE

3. Add the following to your =~/.emacs= file:
   #+BEGIN_EXAMPLE
   (require 'ego)
   #+END_EXAMPLE

** How to quickly build a EGO git repository

If you find that initializing a repository manually is too much trouble,
you can run:
#+BEGIN_EXAMPLE
M-x ego/new-repository
#+END_EXAMPLE

** How to quickly add a new post
#+BEGIN_EXAMPLE
M-x ego/new-post
#+END_EXAMPLE

This command will ask you the follow question:
1. Which project do you want post?
2. Category?
3. Filename?

** How to quickly insert EGO post template

#+BEGIN_EXAMPLE
M-x ego/insert-options-template
#+END_EXAMPLE

** How to configure the default slogan
Add the follow two lines to you config alist.

#+BEGIN_EXAMPLE
:site-main-title "your main slogan"
:site-sub-title "your sub slogan"
#+END_EXAMPLE

** How to add an avatar to the page?
Add the follow line to you config alist.

#+BEGIN_EXAMPLE
:personal-avatar "URL to an image"
#+END_EXAMPLE

Image URL example:
1. =http:/XXXXX.com/XXXX.jpg=
2. /media/img/XXXXX.jpg
3. /assets/XXX/XXX.jpg

** How to change org source files branch to "master"?
Add the follow line to you config alist.

#+BEGIN_EXAMPLE
:repository-org-branch "master"
#+END_EXAMPLE

** How to save html file to branch: "gh-pages"?
Add the follow line to you config alist.

#+BEGIN_EXAMPLE
:repository-org-branch "gh-pages"
#+END_EXAMPLE

** How to add a github link
Add the follow line to you config alist.

#+BEGIN_EXAMPLE
:source-browse-url ("GitHub" "https://github.io/<username>/<project-name>")
#+END_EXAMPLE

** How to do site traffic analytics with Google Analytics?

Add the follow line to you config alist.

#+BEGIN_EXAMPLE
:personal-google-analytics-id "your google analytics id"
#+END_EXAMPLE

** How to disable commenting for posts under certain category?

# category is not recommended for use

#+BEGIN_SRC emacs-lisp
(setq owp/category-config-alist
      (cons '("photography" ;; category name goes here
              :show-comment nil)
            ego/category-config-alist))
#+END_SRC

Other config items:

1. =:show-meta=: show post meta info at the bottom of post?
2. =:uri-generator=: the function used to generate uri for posts
   under that category (however, it is not recommended to
   customize except you are an expert)
3. =:uri-template=: the template used to generate uri
4. =:sort-by=: how to sort posts on category index page, by
5. =:date= or by =:mod-date=  (:mod-date is last modification date)?
6. =:category-index=: generate an index page for this category?

** How to disable commenting for posts under certain summary?
Feature left for improvement.

* Change Logs
** v0.1

- Initial version, org-webpage which tumashu forks from org-page.
- Use org-publish style config.
- Increment Theme support.

** v0.9

- Initial version, EGO which kuangdash forks from org-webpage
- More stability.
- New theme.
- Add some feature.

* Footnotes

[fn:1] 这些暂时为英文，相信中学英语水平即可。
